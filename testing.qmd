```{r}
library(rashomontva)
library(collections)
library(tidyverse)
```

```{r}
x <- new_RashomonSet(models = list("hi","hello","hey"),
                     losses = c(1,3,1.5),
                     num_pools = list(2,3,1),
                     profiles = list("h","g","q"),
                     pool_dictionaries = list("x","q","c"))

sort(x)

insert_model(x)

```
#todo add examples

```{r}
# M = 2
# R = c(3,4)

data <- data.frame(
  arm1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3),
  arm2 = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 4, 1, 2, 3, 1, 2, 3, 4, 2, 4, 1, 2, 4),
  value = runif(27)
)
sigma <- initialize_sigma(2, c(5, 5))

data <- assign_policy_label(data, arm1, arm2)

data$original_label <- data$policy_label + 1

policy_list <- create_policies_from_data(data, arm1, arm2)

edge_list <- lattice_edges(sigma, policy_list)

M <- policy_means(data, value)

dict <- extract_pools(policy_list, sigma, lattice_edges = edge_list)

pools_to_data(data, dict)
# use as.integer

generate_policy_dict <- function(policy_list, sigma, lattice_edges, M){
  
  pool_dict <- extract_pools(policy_list, sigma, lattice_edges)
  # assigning pools to policy means so that we can compute pool means
  M_pool <- pools_to_data(M, pool_dict)
  # dictionary of pool means of type cc:dictionary()
  fixed_pool_means_dict <- policy_to_pool_means(M_pool, mean, pool)

  fixed_pool_means_dict
}

cc <- generate_policy_dict(policy_list, sigma, edge_list, M)

rashomontva::compute_mse_loss(data, value, cc, original_label, 0)


data %>% 
  mutate(mean = mean(value)) %>% 
  summarize(mse = mean((value-mean)^2))

```

```{r}
data <- read.csv("output.csv") %>%
  rename(
    arm1 = "X0",
    arm2 = "X1",
    arm3 = "X2",
    id = "X",
    observation = "Y"
  ) %>%
  select(-D)

M <- 3
R <- c(4, 3, 3)
H <- Inf
theta <- 13
lamb <- 1

rset <- aggregate_rashomon_profiles(data,
  arm1,
  arm2,
  arm3,
  M = M,
  H = H,
  R = R,
  reg = lamb,
  value = observation,
  theta = theta
)

# TODO: Make predictions from this output
# TODO: Test
# TODO: Deal with ids in a smart way
#' @export
make_rashomon_objects <- function(rset) {
  rash_models <- list()
  for (x in rset[[1]]) {
    rashomon_i <- new_RashomonSet(
      models = list(),
      losses = numeric(),
      num_pools = list(),
      profiles = list(),
      pool_dictionaries = list()
    )
    for (i in 1:length(rset[[2]])) {
      model_i <- rset[[2]][[i]]$models[[x[[i]]]]
      loss_i <- rset[[2]][[i]]$losses[[x[[i]]]]
      pools_i <- rset[[2]][[i]]$pools[[x[[i]]]]
      profiles_i <- rset[[2]][[i]]$profiles[[x[[i]]]]

      rashomon_i = insert_model(rashomon_i, list(model_i), loss_i, pools_i, list(profiles_i), NA)
    }
    rash_models <- append(rash_models, list(rashomon_i))
  }
  rash_models
}

output <- make_rashomon_objects(rset)

#' @export
models <- make_rashomon_objects(rset)

compute_loss <- function(model) {
  sum(model$losses)
}
```

```{r}



x <- c(2,1,3)

sort(x)
```
