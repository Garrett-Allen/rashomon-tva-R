return(k_sum)
}
num_pools_fixed_r <- function(sigma, R){
m = nrow(sigma)
z = rowSums(sigma)
z_sums = sum_product_k(z)
H = 0
print(z_sums)
for(i in 1:(m + 1)){
sign = (-1)^(i-1)
H = H + sign * z_sums[i] * ((R - 1))^(m - i +1)
print(H)
}
H
}
num_pools_fixed_r(new_sigma, 3)
num_pools_fixed_r(new_sigma, 4)
num_pools_fixed_r <- function(sigma, R){
m = nrow(sigma)
z = rowSums(sigma)
z_sums = sum_product_k(z)
H = 0
for(i in 1:(m + 1)){
sign = (-1)^(i-1)
H = H + sign * z_sums[i] * ((R - 1))^(m - i +1)
}
H
}
num_pools_fixed_r(new_sigma, 4)
num_pools_fixed_r(sigma, 4)
2^2 + length(1)
length(1)
rowSums(sigma)
2 == rowSums(sigma)
all(2 == rowSums(sigma))
find_R <- function(sigma){
R = rowSums(sigma, na.rm = TRUE) + 2
if(all(R[1] == R)){
return(R[1])
}
return(R)
}
powerset <- function(arr) {
s <- as.list(arr)
subsets <- lapply(0:length(s), function(r) {
combinat::combn(s, r)
})
unlist(subsets, recursive = FALSE)
}
powerset(c(1,2))
powerset(c(1,2,3,4,5))
powerset <- function(arr) {
s <- as.list(arr)
subsets <- lapply(0:length(s), function(r) {
combinat::combn(s, r)
})
subsets
}
powerset(c(1,2,3,4,5))
unlist(powerset(c(1,2,3,4,5)))
unlist(powerset(c(1,2,3,4,5)), recursive = FALSE)
powerset(c(1,2,3))
lapply(powerset(c(1,2,3)),as.list())
lapply(powerset(c(1,2,3)),as.list)
x <- lapply(powerset(c(1,2,3)),as.list)
x[[1]]
x[[2]]
x[[3]]
x[[3]][[1]]
x[3]
x <- lapply(powerset(c(1,2,3)))
x <- powerset(c(1,2,3))
x
x[[3]]
x[[3]][,1]
?combn
powerset <- function(arr) {
s <- as.list(arr)
subsets <- lapply(0:length(s), function(r) {
combinat::combn(s, r,simplify = TRUE)
})
subsets
}
x <- powerset(c(1,2,3))
x
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(set_of_combs in z_combs){
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
new_sigma <- matrix(c(NA,1,1,1), ncol = 2, nrow = 2)
num_pools_change_r(new_sigma, R = c(1,2))
x
x[[2:4]]
x[2:3]
x[2:4]
x[2:]
x[2:]
x[2:,]
x[2,]
x[2:length(x)]
powerset <- function(arr) {
s <- as.list(arr)
subsets <- lapply(0:length(s), function(r) {
combinat::combn(s, r, simplify = TRUE)
})
subsets[2:length(subsets)]
}
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(set_of_combs in z_combs){
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
print(z_combs)
H = 0
for(set_of_combs in z_combs){
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
print(z_combs)
H = 0
for(set_of_combs in z_combs){
print(set_of_combs)
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(set_of_combs in z_combs){
print(set_of)
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
sign = (-1)^ length(comb)
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(set_of_combs in z_combs){
print(set_of_combs)
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
x
x[[2]]
length(x)
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
print(set_of_combs)
for(k in 1:ncol(set_of_combs)){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
for(k in 1:ncol(z_combs[[i]])){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
print(z_combs[[i]])
for(k in 1:ncol(z_combs[[i]])){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
x[[1]]
x[[2]]
length(x[[2]])
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
print(z_combs[[i]])
for(k in 1:length(z_combs[[i]])){
comb = set_of_combs[,k]
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
x[[1]]
x[[2]]
x[,1]
x[[1]][1]
x[[1]][,1]
x[[2]][1]
x[[2]][,1]
x <- powerset(c(1,2,3.4))
x
x[[2]]
x[[2]][1]
x[[2]][,1]
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(nrow(all_combs_i) > 1){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
nrow(1)
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(!is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
z = rowSums(sigma, na.rm = TRUE)
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(!is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
}
}
H
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(!is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits\
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(!is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
z_sum = prod(z[comb])
splits = R_prod / prod(R[comb])
H = H + sign * z_sum * splits
print(H)
}
}
H
}
num_pools_change_r(new_sigma, R = c(1,2))
num_pools_change_r <- function(sigma, R){
m = nrow(sigma)
R = R - 1
R_prod = prod(R)
z = rowSums(sigma, na.rm = TRUE)
indices = 1:m
z_combs = powerset(indices)
H = 0
for(i in 2:length(z_combs)){
all_combs_i = z_combs[[i]]
for(k in 1:length(all_combs_i)){
if(!is.null(nrow(all_combs_i))){
comb = all_combs_i[,k]
}
else{
comb = all_combs_i[k]
}
sign = (-1)^ length(comb)
print(sign)
z_sum = prod(z[comb])
print(z_sum)
splits = R_prod / prod(R[comb])
print(splits)
H = H + sign * z_sum * splits
print(H)
}
}
H
}
num_pools_change_r(new_sigma, R = c(1,2))
