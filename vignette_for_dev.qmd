---
title: "rashomon_package"
author: "garrett-allen"
format: html
editor: visual
---

```{r}
library(rashomontva)
library(tidyverse)
library(collections)
library(data.table)
```

#todo add examples

```{r}

data <- assign_policy_label(data,arm1,arm2)
policy_list <- rashomontva::create_policies_from_data(data, arm1, arm2)
sigma <- matrix(c(1,1,1,1), ncol = 2, nrow = 2)

edge_list <- lattice_edges(sigma, policy_list)

new_sigma <- matrix(c(0,1,1,1), ncol = 2, nrow = 2)
pruned_edge_list <- prune_edges(new_sigma,edge_list,policy_list)

cc <- connected_components(length(pruned_edge_list),pruned_edge_list,policy_list)

edge_list

cc$values()

```

```{r}
data <- data.frame(arm1 = c(1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3),
                   arm2 = c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3),
                   value = runif(27))
#searching rashomon set

#calculate policy_means
policy_means <- function(data, value, policy_label, ...){
  
  #convert to data.table
  data %>% 
    group_by(...) %>% 
    summarize(mean = mean({{value}}),
              .groups = "drop",
              policy_label = policy_label[1])
}

#note: data argument here must be output from policy_means
pools_to_data <- function(data, pools_dict){
  
  data %>% 
    rowwise() %>% 
    mutate(pool = pools_dict$get(policy_label)) %>% 
    ungroup()
    
}

#note: data argument here must be output from pools_to_data
pool_means <- function(data, value, pool){
  
  data %>% 
    group_by({{pool}}) %>% 
    summarize(mean_pool = mean({{value}}))
}


#used for finding B, make maximal number of cuts
partition_sigma <- function(i, j, sigma) {
  
  new_sigma = sigma
  new_sigma[i, j:ncol(new_sigma)] = 0
  new_sigma[is.na(sigma)] = NA
  
  new_sigma
}

#compute policy means from data that has already been parsed by assign_policy_labels
M <- policy_means(data, value, policy_label, arm1, arm2) 

M <- pools_to_data(M, cc) #assign pools from policy labels

P <- pool_means(M, mean, pool)



compute_B <- function(){
  
}

policy_list
```
